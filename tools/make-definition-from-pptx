#!/bin/bash
# For MacOS user, Associative arrays cannot be used in bash with MacOS. Install newly bash from homebrew `brew install bash` and use `/usr/local/bin/bash ./make-definition-from-pptx`

url=$(curl -s "https://aws.amazon.com/architecture/icons/" | pup 'a:contains("Download PPTx for Light Backgrounds") attr{href}')
wget $url -O /tmp/AWS-Architecture-Icons-Deck_For-Light-BG.pptx.zip
unzip -o /tmp/AWS-Architecture-Icons-Deck_For-Light-BG.pptx -d /tmp/aws-pptx/
pptx_file=$(basename /tmp/aws-pptx/AWS-Architecture-Icons-Deck_For-Light-BG*.pptx)
unzip -o /tmp/aws-pptx/AWS-Architecture-Icons-Deck_For-Light-BG*.pptx -d /tmp/aws-pptx-content/
slides_path="/tmp/aws-pptx-content/ppt/slides"
output_path="../definitions/definition-for-aws-icons-light.yaml"

echo "" > $output_path

declare -A image_mappings=()
while read xml
do
    slide=$(basename "$xml" | sed 's/.xml//g')
    echo "# Parse XML from slide $slide"
    while read line
    do
        name=$(xmllint --xpath "//*[local-name()='cNvPr']/@descr" <(printf "%s" "$line" \
            | sed 's/p://g' | sed 's/a://g' | sed 's/c://g' | sed 's/r://g') 2> /dev/null | cut -d'"' -f2 \
            | sed 's/ group\.//g' | sed 's/ Service icon\.//g' | sed 's/ service icon\.//g' \
            | sed 's/ group icon\.//g' | sed 's/ instance icon for the Database category\.//g' \
            | sed 's/ resource icon for.*//g' | sed 's/ instance icon for.*//g' \
            | sed 's/ storage class icon for.*//g' | sed 's/ standard category icon\.//g' \
            | sed 's/A representation of a.*//g' | sed 's/\.//g' | sed 's/ *$//g' \
            | sed 's/&#10;//g' | sed 's/&amp;/\&/g' | sed 's/&#x2013;/\â€“/g')
        rId=$(xmllint --xpath "//*[local-name()='blip']/@embed" <(printf "%s" "$line" | sed 's/p://g' | sed 's/a://g' | sed 's/c://g' | sed 's/r://g') 2> /dev/null | cut -d'"' -f2)
        image=$(xmllint --xpath "//*[local-name()='Relationship'][@Id='"$rId"']/@Target" "$slides_path/_rels/$slide.xml.rels" 2>/dev/null | cut -d'"' -f2 | sed 's/..\/media\///g')
        [[ "$name" == "" ]] || [[ "$image" == "" ]] && continue
        [[ "$name" == "Example of an architecture diagram" ]] && continue
        [[ "$name" == "Graphic icon" ]] && continue
        if [[ -v "image_mappings["$name"]" ]] && [[ "${image_mappings["$name"]}" != "$image" ]]; then
          echo "duplicate name: $name"
          for i in $(seq 2 9); do
            if [[ ! -v "image_mappings[$name($i)]" ]]; then
              image_mappings["$name($i)"]=$image
              echo "use name: $name($i)"
              break
            fi
          done
        else
          image_mappings["$name"]=$image
        fi
        echo "Found an image corresponding to \"$name\": $image"
    done < <(xmllint --xpath "//*[local-name()='pic']" $xml 2>/dev/null)
    echo ""
done < <(ls $slides_path/*.xml | awk '{ print length, $0 }' | sort -n -s | cut -d" " -f2-)

echo -e "# This file automatically generated by tools/make-definition-from-pptx. If you find a bug in this file, please report the issue.\n" >> $output_path

cat >> $output_path <<EOF
Definitions:
  Main:
    Type: Zip
    ZipFile:
      SourceType: url
      Url: "$url"

  ArchitectureIconsPptx:
    Type: Zip
    ZipFile:
      SourceType: file
      Source: Main
      Path: "$pptx_file"

  ArchitectureIconsPptxMedia:
    Type: Directory
    Directory:
      Source: ArchitectureIconsPptx
      Path: "ppt/media/"
EOF

echo -e "\n  # Groups\n" >> $output_path

cat >> $output_path <<EOF
  "AWS::Diagram::Canvas":
    Type: Group
    Border:
      Color: "rgba(0, 0, 0, 0)"
    Fill:
      Color: "rgba(255, 255, 255, 255)"
    CFn:
      HasChildren: true

  AWS::Diagram::Cloud:
    Type: Group
    Icon:
      Source: ArchitectureIconsPptxMedia
      Path: "image7.png"
    Border:
      Color: "rgba(0, 0, 0, 255)"
    Fill:
      Color: "rgba(0, 0, 0, 0)"
    Label:
      Title: "AWS Cloud"
      Color: "rgba(0, 0, 0, 255)"
    CFn:
      HasChildren: true

  AWSCloudNoLogo:
    Type: Preset
    Icon:
      Source: ArchitectureIconsPptxMedia
      Path: "image40.png"
    Border:
      Color: "rgba(0, 0, 0, 255)"
    Fill:
      Color: "rgba(0, 0, 0, 0)"
    Label:
      Title: "AWS Cloud"
      Color: "rgba(0, 0, 0, 255)"

  AWS::Region:
    Type: Group
    Icon:
      Source: ArchitectureIconsPptxMedia
      Path: "image42.png"
    CFn:
      HasChildren: true

  AWS::AutoScaling::AutoScalingGroup:
    Type: Group
    Icon:
      Source: ArchitectureIconsPptxMedia
      Path: "image21.png"
    Label:
      Title: "Auto Scaling Group"
      Color: "rgba(0, 0, 0, 255)"
    CFn:
      HasChildren: true

  AWS::EC2::VPC:
    Type: Group
    Icon:
      Source: ArchitectureIconsPptxMedia
      Path: "image15.png"
    Label:
      Title: "VPC"
      Color: "rgba(0, 0, 0, 255)"
    Fill:
      Color: "rgba(0, 0, 0, 0)"
    Border:
      Color: "rgba(105, 59, 197, 255)"
    CFn:
      HasChildren: true

  AWS::EC2::Subnet:
    Type: Group
    Icon:
      Source: ArchitectureIconsPptxMedia
      Path: "image26.png"
    Label:
      Title: "Subnet"
      Color: "rgba(0, 0, 0, 255)"
    Fill:
      Color: "rgba(0, 0, 0, 0)"
    Border:
      Color: "rgba(122, 161, 22, 255)"
    CFn:
      HasChildren: true

  PrivateSubnet:
    Type: Preset
    Icon:
      Source: ArchitectureIconsPptxMedia
      Path: "image44.png"
    Label:
      Title: "Private Subnet"
      Color: "rgba(0, 0, 0, 255)"
    Fill:
      Color: "rgba(0, 0, 0, 0)"
    Border:
      Color: "rgba(0, 164, 166, 255)"

  PublicSubnet:
    Type: Preset
    Icon:
      Source: ArchitectureIconsPptxMedia
      Path: "image26.png"
    Label:
      Title: "Public Subnet"
      Color: "rgba(0, 0, 0, 255)"
    Fill:
      Color: "rgba(0, 0, 0, 0)"
    Border:
      Color: "rgba(122, 161, 22, 255)"

  AWS::Diagram::DataCenter:
    Type: Group
    Icon:
      Source: ArchitectureIconsPptxMedia
      Path: "image48.png"
    Label:
      Title: "Corporate data center"
      Color: "rgba(29, 137, 0, 255)"
    Fill:
      Color: "rgba(0, 0, 0, 0)"
    Border:
      Color: "rgba(125, 137, 152, 255)"
    CFn:
      HasChildren: true

  AWS::EC2::SpotFleet:
    Type: Group
    Icon:
      Source: ArchitectureIconsPptxMedia
      Path: "image52.png"
    Label:
      Title: "Spot fleet"
      Color: "rgba(29, 137, 0, 255)"
    Fill:
      Color: "rgba(0, 0, 0, 0)"
    Border:
      Color: "rgba(237, 113, 0, 255)"
    CFn:
      HasChildren: true

  AWS::Diagram::Account:
    Type: Group
    Icon:
      Source: ArchitectureIconsPptxMedia
      Path: "image54.png"
    Label:
      Title: "AWS account"
      Color: "rgba(29, 137, 0, 255)"
    Fill:
      Color: "rgba(0, 0, 0, 0)"
    Border:
      Color: "rgba(231, 21, 123, 255)"
    CFn:
      HasChildren: true

EOF

echo -e "\n  # Resource Types\n" >> $output_path

while read line
do
    type=$(echo "$line" | awk -F',' '{print $1}')
    echo "$type" > /dev/stderr
    name=$(echo "$line" | awk -F',' '{print $2}')
    [[ "$name" == "" ]] && continue
    label=$(echo "$name" | sed 's/([0-9])//g')
    image=${image_mappings["$name"]}
    [[ "$image" == "" ]] && echo "Not found $image" > /dev/stderr && continue
    has_children="false"
    [[ "$type" == "AWS::ECS::Cluster" ]] || [[ "$type" == "AWS::EKS::Cluster" ]] || [[ "$type" == "AWS::CodePipeline::Pipeline" ]] && has_children="true"
    (
        echo "  $type:"
        echo "    Type: Resource"
        echo "    Icon:"
        echo "      Source: ArchitectureIconsPptxMedia"
        echo "      Path: \"$image\""
        echo "    Label:"
        echo "      Title: \"$label\""
        echo "      Color: \"rgba(0, 0, 0, 255)\""
        echo "    CFn:"
        echo "      HasChildren: $has_children"
        echo ""
    ) >> $output_path
done < ./make-definition-from-pptx-mappings

echo -e "\n  # Presets\n" >> $output_path

for key in "${!image_mappings[@]}"
do
    name=$(echo "$key" | sed 's/([0-9])//g')
    image=${image_mappings["$key"]}
    (
        echo "  \"$key\":"
        echo "    Type: Preset"
        echo "    Icon:"
        echo "      Source: ArchitectureIconsPptxMedia"
        echo "      Path: \"$image\""
        echo "    Label:"
        echo "      Title: \"$name\""
        echo "      Color: \"rgba(0, 0, 0, 255)\""
        echo ""
    ) >> $output_path
done

rm /tmp/AWS-Architecture-Icons-Deck_For-Light-BG.pptx.zip
rm -rf /tmp/aws-pptx/
